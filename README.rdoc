== README

* Ruby/Rails version
  Ruby 2.3.0, Rails 5.2.

* Database creation
  Uses sqlite3 and default test db defined in database.yml - test.sqlite3

* How to run the test suite
  Just run rake. Uses rspec-rails and database_cleaner(to delete everything in the db before running the tests).

* Deployment instructions
  1. Run bundle install
  2. Run rake db:migrate
  3. Run rake to run all tests. Run rspec spec/requests/pages/page_content_spec.rb to run tests related to the API end points.

* Application overview
  This application defines two API endpoints. The first one receives a URL to an HTML page and saves the contents of header and link    tags to the database.
  The second one returns the contents of each saved page in JSON format.
  See details below:
  1. POST /api/pages/index_page_content : This endpoint receives the URL of a page (as JSON), parses the content and stores the contents  of h1, h2, h3 and link tags in the database. 
     See the test "POST /api/pages/index_page_content" in spec/requests/pages/page_content_rspec.rb. 
     The tests use an HTML file stored in AWS S3 (https://s3-us-west-2.amazonaws.com/tmp9779/page1.html) as input.
2. GET /api/pages : This endpoint returns each page that has been saved in the DB as JSON in this format:

   [{
	"url": "https://s3-us-west-2.amazonaws.com/tmp9779/page1.html",
	"h1_data": "[\"Page1 H1 tag first\",\"Page1 H1 tag second\"]",
	"h2_data": "[\"Page1 H2 tag first\",\"Page1 H2 tag second\",\"Page1 H2 tag third\"]",
	"h3_data": "[\"Page1 H3 tag first\",\"Page1 H3 tag second\"]",
	"links": "[{\"href\":\"https://www.google.com\",\"link_text\":\"Page1 link 1 google\"},     {\"href\":\"https://www.yahoo.com\",\"link_text\":\"Page1 link 2 yahoo\"}]"
   }]

Please note that h1_data, h2_data, h3_data and links are stored in db as JSON strings. This will need to be parsed again like
this before accessing the array elements:
      pages = JSON.parse(response.body)
      h1_data = JSON.parse pages[0]["h1_data"]
      
Please see the test "GET /api/pages" in spec/requests/pages/page_content_rspec.rb.

*  Vulnerable code - SQL Injection in update_all method
Relevant files are:
1. See tests in spec/requests/users/user_spec.rb
2. app/controllers/users_controller.rb
   Has 5 methods: 
   *  update_admin - Original method with vulnerable code.
   *  update_admin_incorrect_0 - First incorrect solution.
   *  update_admin_incorrect_1 - Second incorrect solution.
   *  update_admin_incorrect_2 - Third incorrect solution.
   *  update_admin_secure - secure solution that is not vulnerable to SQL injection.





